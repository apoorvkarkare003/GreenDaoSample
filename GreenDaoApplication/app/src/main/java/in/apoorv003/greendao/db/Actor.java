package in.apoorv003.greendao.db;

import in.apoorv003.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ACTOR".
 */
public class Actor {

    private Long id;
    /** Not-null value. */
    private String name;
    private long actorId;
    private long actorMovieId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActorDao myDao;

    private Movie movie;
    private Long movie__resolvedKey;


    public Actor() {
    }

    public Actor(Long id) {
        this.id = id;
    }

    public Actor(Long id, String name, long actorId, long actorMovieId) {
        this.id = id;
        this.name = name;
        this.actorId = actorId;
        this.actorMovieId = actorMovieId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActorDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public long getActorId() {
        return actorId;
    }

    public void setActorId(long actorId) {
        this.actorId = actorId;
    }

    public long getActorMovieId() {
        return actorMovieId;
    }

    public void setActorMovieId(long actorMovieId) {
        this.actorMovieId = actorMovieId;
    }

    /** To-one relationship, resolved on first access. */
    public Movie getMovie() {
        long __key = this.actorId;
        if (movie__resolvedKey == null || !movie__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovieDao targetDao = daoSession.getMovieDao();
            Movie movieNew = targetDao.load(__key);
            synchronized (this) {
                movie = movieNew;
            	movie__resolvedKey = __key;
            }
        }
        return movie;
    }

    public void setMovie(Movie movie) {
        if (movie == null) {
            throw new DaoException("To-one property 'actorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.movie = movie;
            actorId = movie.getId();
            movie__resolvedKey = actorId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
