package in.apoorv003.greendao.db;

import java.util.List;
import in.apoorv003.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MOVIE".
 */
public class Movie {

    private Long id;
    /** Not-null value. */
    private String name;
    private long movieId;
    private long directorId;
    private long productionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovieDao myDao;

    private Director director;
    private Long director__resolvedKey;

    private ProductionHouse productionHouse;
    private Long productionHouse__resolvedKey;

    private List<Actor> actorList;

    public Movie() {
    }

    public Movie(Long id) {
        this.id = id;
    }

    public Movie(Long id, String name, long movieId, long directorId, long productionId) {
        this.id = id;
        this.name = name;
        this.movieId = movieId;
        this.directorId = directorId;
        this.productionId = productionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovieDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public long getMovieId() {
        return movieId;
    }

    public void setMovieId(long movieId) {
        this.movieId = movieId;
    }

    public long getDirectorId() {
        return directorId;
    }

    public void setDirectorId(long directorId) {
        this.directorId = directorId;
    }

    public long getProductionId() {
        return productionId;
    }

    public void setProductionId(long productionId) {
        this.productionId = productionId;
    }

    /** To-one relationship, resolved on first access. */
    public Director getDirector() {
        long __key = this.movieId;
        if (director__resolvedKey == null || !director__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DirectorDao targetDao = daoSession.getDirectorDao();
            Director directorNew = targetDao.load(__key);
            synchronized (this) {
                director = directorNew;
            	director__resolvedKey = __key;
            }
        }
        return director;
    }

    public void setDirector(Director director) {
        if (director == null) {
            throw new DaoException("To-one property 'movieId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.director = director;
            movieId = director.getId();
            director__resolvedKey = movieId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ProductionHouse getProductionHouse() {
        long __key = this.movieId;
        if (productionHouse__resolvedKey == null || !productionHouse__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductionHouseDao targetDao = daoSession.getProductionHouseDao();
            ProductionHouse productionHouseNew = targetDao.load(__key);
            synchronized (this) {
                productionHouse = productionHouseNew;
            	productionHouse__resolvedKey = __key;
            }
        }
        return productionHouse;
    }

    public void setProductionHouse(ProductionHouse productionHouse) {
        if (productionHouse == null) {
            throw new DaoException("To-one property 'movieId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.productionHouse = productionHouse;
            movieId = productionHouse.getId();
            productionHouse__resolvedKey = movieId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Actor> getActorList() {
        if (actorList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActorDao targetDao = daoSession.getActorDao();
            List<Actor> actorListNew = targetDao._queryMovie_ActorList(id);
            synchronized (this) {
                if(actorList == null) {
                    actorList = actorListNew;
                }
            }
        }
        return actorList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActorList() {
        actorList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
